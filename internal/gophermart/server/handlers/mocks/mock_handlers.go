// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vkupriya/go-gophermart/internal/gophermart/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AccrualWithdraw mocks base method.
func (m *MockService) AccrualWithdraw(w models.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccrualWithdraw", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccrualWithdraw indicates an expected call of AccrualWithdraw.
func (mr *MockServiceMockRecorder) AccrualWithdraw(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccrualWithdraw", reflect.TypeOf((*MockService)(nil).AccrualWithdraw), w)
}

// BalanceGet mocks base method.
func (m *MockService) BalanceGet(uid string) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceGet", uid)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceGet indicates an expected call of BalanceGet.
func (mr *MockServiceMockRecorder) BalanceGet(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceGet", reflect.TypeOf((*MockService)(nil).BalanceGet), uid)
}

// OrderAdd mocks base method.
func (m *MockService) OrderAdd(uid, oid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderAdd", uid, oid)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderAdd indicates an expected call of OrderAdd.
func (mr *MockServiceMockRecorder) OrderAdd(uid, oid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderAdd", reflect.TypeOf((*MockService)(nil).OrderAdd), uid, oid)
}

// OrderGet mocks base method.
func (m *MockService) OrderGet(oid string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderGet", oid)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderGet indicates an expected call of OrderGet.
func (mr *MockServiceMockRecorder) OrderGet(oid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderGet", reflect.TypeOf((*MockService)(nil).OrderGet), oid)
}

// OrdersGet mocks base method.
func (m *MockService) OrdersGet(uid string) (models.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersGet", uid)
	ret0, _ := ret[0].(models.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersGet indicates an expected call of OrdersGet.
func (mr *MockServiceMockRecorder) OrdersGet(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersGet", reflect.TypeOf((*MockService)(nil).OrdersGet), uid)
}

// UserAdd mocks base method.
func (m *MockService) UserAdd(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAdd", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserAdd indicates an expected call of UserAdd.
func (mr *MockServiceMockRecorder) UserAdd(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAdd", reflect.TypeOf((*MockService)(nil).UserAdd), user)
}

// UserGet mocks base method.
func (m *MockService) UserGet(uid string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", uid)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockServiceMockRecorder) UserGet(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockService)(nil).UserGet), uid)
}

// UserLogin mocks base method.
func (m *MockService) UserLogin(uid, passwd string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", uid, passwd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockServiceMockRecorder) UserLogin(uid, passwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockService)(nil).UserLogin), uid, passwd)
}

// WithdrawalsGet mocks base method.
func (m *MockService) WithdrawalsGet(uid string) (models.Withdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawalsGet", uid)
	ret0, _ := ret[0].(models.Withdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawalsGet indicates an expected call of WithdrawalsGet.
func (mr *MockServiceMockRecorder) WithdrawalsGet(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawalsGet", reflect.TypeOf((*MockService)(nil).WithdrawalsGet), uid)
}
